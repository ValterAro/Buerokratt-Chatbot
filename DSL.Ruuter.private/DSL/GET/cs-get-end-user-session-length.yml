extractRequestData:
  assign:
    cookie: ${incoming.headers.cookie}

extractTokenData:
  call: http.post
  args:
    # TODO: replace with env variable and correct path to TIM endpoint
    url: "[CHATBOT_BYK_RUUTER]:[CHATBOT_BYK_RUUTER_PORT]/mocks/mock-tim-custom-jwt-userinfo"
    headers:
      cookie: ${cookie}
    body:
      # TODO: pass cookie name correctly to TIM
      cookieName: "customJwtCookie"
  result: jwtResult

validateAdministrator:
  switch:
    - condition: ${jwtResult.response.body.response.authorities.some(role => ["ROLE_ADMINISTRATOR", "ROLE_CUSTOMER_SUPPORT_AGENT","ROLE_SERVICE_MANAGER"].includes(role))}
      next: getConfigurationValue
  next: returnUnauthorized

getConfigurationValue:
  call: http.post
  args:
    # TODO: replace with env variable
    url: "[CHATBOT_RESQL]:[CHATBOT_RESQL_PORT]/get-configuration"
    body:
      key: "end_user_session_length"
  result: getConfigurationValueResult

mapData:
  call: http.post
  args:
    # TODO: replace with env variable
    url: "[CHATBOT_DMAPPER]:[CHATBOT_DMAPPER_PORT]/json/v2/return_first_configuration_from_array"
    body:
      configurationArray: ${getConfigurationValueResult.response.body}
  result: dataMapperData
  next: returnSuccess

returnSuccess:
  return: ${dataMapperData.response.body}
  next: end

returnUnauthorized:
  return: "error: unauthorized"
